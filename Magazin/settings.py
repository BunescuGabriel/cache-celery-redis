"""
Django settings for Magazin project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%iyras&h73d!qy$1n%4y!_d=@%=st=wbh^aq-$u%asil&4oeja'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

AUTH_USER_MODEL = "users.CustomUser"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'telefon',
    'users',
    'django_redis',
    "django_celery_results",
    'laptop',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Magazin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Magazin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.magazin2',
    }
}

# CACHES dictionary which contains caching configurations.
CACHES = {
    "default": {
        # stocarea in mapa a caches
        # "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        # "LOCATION": "C:/Users/gabyb/Programe-Univer/prog-exersare/cache-directory",
        
        ##################################
        
         # caches in baza de date.
         
        # "BACKEND": "django.core.cache.backends.db.DatabaseCache",

        # "LOCATION": "my_cache_table",
        
        #comanta in terminal pentru a crea tabelul in baza de date 
        # # python manage.py createcachetable
        
        ##################################
        
        # Поэтому Memcached необходимо установить на машине отдельно. Затем в своем 
        # Django-приложении установите и настройте один из клиентов для работы с ним, 
        # например pylibmc или pymemcache, на использование Memcached.
        
        # "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        
        # # LOCATION parameter to specify the Memcached server's IP address and port.
        # "LOCATION": "127.0.0.1:11211",
        
        ############################# - local redis
        
        #  # Here, we're using the Redis cache backend.
        # "BACKEND": "django.core.cache.backends.redis.RedisCache",

        # # A LOCATION parameter to specify the Redis server's address and port.
        # "LOCATION": "redis://127.0.0.1:6379",
        
        ##########
        
        'BACKEND': 'django_redis.cache.RedisCache',
         # Adresa și portul Redis, precum și numărul bazei de date
        'LOCATION': 'redis://redis-10923.c328.europe-west3-1.gce.redns.redis-cloud.com:10923/Free-db',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': 'p2pCqetwaXmnBdn9cJXQt99hK8EXDxfd',  # Parola pentru autentificare   
        }  
    }
}




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
import os

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com' 
EMAIL_PORT = 587 
EMAIL_USE_TLS = True 
EMAIL_HOST_USER = 'gabibun100@gmail.com'  
EMAIL_HOST_PASSWORD = 'qrvh lgld hsbg bgwj' 
   

# redis related settings
REDIS_HOST = 'redis-10923.c328.europe-west3-1.gce.redns.redis-cloud.com'
REDIS_PORT = 10923
REDIS_PASSWORD = 'p2pCqetwaXmnBdn9cJXQt99hK8EXDxfd'

REDIS_URL = f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/0'

CELERY_BROKER_URL = REDIS_URL
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERYD_POOL = 'solo'

### redis star docker ##   docker run -d -p 6379:6379 redis

### pentru a porni celery pe windows
# celery -A Magazin worker --loglevel=info --pool=solo
#pentru a porni best 
### celery -A Magazin beat -l INFO 

# # redis related settings -- localhost
# REDIS_HOST = '127.0.0.1'
# REDIS_PORT = '6379'

# # Construirea URL-ului cu utilizatorul implicit
# REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/0'

# CELERY_BROKER_URL = REDIS_URL
# CELERY_RESULT_BACKEND = REDIS_URL
# CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'

# CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
# # Set worker type to solo
# CELERYD_POOL = 'solo'